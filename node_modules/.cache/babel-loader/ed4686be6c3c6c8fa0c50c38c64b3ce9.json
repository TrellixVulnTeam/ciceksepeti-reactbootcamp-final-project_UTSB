{"ast":null,"code":"/* eslint-disable object-shorthand */\nimport axios from \"axios\";\nimport * as types from \"../actionTypes/actionTypes\";\n\nconst addNewProductPending = () => ({\n  type: types.ADD_NEW_PRODUCT_PENDING\n});\n\nconst addNewProductSuccess = (price, imageUrl, title, statustitle, statusid, colortitle, colorid, brandtitle, brandid, categorytitle, categoryid, description, isOfferable) => ({\n  type: types.ADD_NEW_PRODUCT_SUCCESS\n});\n\nconst addNewProductFail = err => ({\n  type: types.ADD_NEW_PRODUCT_FAIL,\n  payload: err\n});\n\nexport const addNewProductInitiate = (price, imageUrl, title, statustitle, statusid, colortitle, colorid, brandtitle, brandid, categorytitle, categoryid, description, isOfferable) => {\n  return function (dispatch) {\n    dispatch(addNewProductPending());\n    axios.post(\"https://bootcampapi.techcs.io/api/fe/v1/product/create\", {\n      price: price,\n      imageUrl: imageUrl,\n      title: title,\n      status: {\n        title: statustitle,\n        id: statusid\n      },\n      color: {\n        title: colortitle,\n        id: colorid\n      },\n      brand: {\n        title: brandtitle,\n        id: brandid\n      },\n      category: {\n        title: categorytitle,\n        id: categoryid\n      },\n      description: description,\n      isOfferable: isOfferable\n    }).then(response => {\n      console.log(\"offered Price Response:\", response);\n      dispatch(addNewProductSuccess(price, imageUrl, title, statustitle, statusid, colortitle, colorid, brandtitle, brandid, categorytitle, categoryid, description, isOfferable));\n    }).catch(err => addNewProductFail(err));\n  };\n};","map":{"version":3,"sources":["/Users/oguzhanyuksel/Desktop/Yazilim/CICEKSEPETI/ciceksepeti-react-bootcamp-final-project1/src/redux/actions/addNewProductAction.js"],"names":["axios","types","addNewProductPending","type","ADD_NEW_PRODUCT_PENDING","addNewProductSuccess","price","imageUrl","title","statustitle","statusid","colortitle","colorid","brandtitle","brandid","categorytitle","categoryid","description","isOfferable","ADD_NEW_PRODUCT_SUCCESS","addNewProductFail","err","ADD_NEW_PRODUCT_FAIL","payload","addNewProductInitiate","dispatch","post","status","id","color","brand","category","then","response","console","log","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;;AAEA,MAAMC,oBAAoB,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAEF,KAAK,CAACG;AADsB,CAAP,CAA7B;;AAGA,MAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,QAF2B,EAG3BC,KAH2B,EAI3BC,WAJ2B,EAK3BC,QAL2B,EAM3BC,UAN2B,EAO3BC,OAP2B,EAQ3BC,UAR2B,EAS3BC,OAT2B,EAU3BC,aAV2B,EAW3BC,UAX2B,EAY3BC,WAZ2B,EAa3BC,WAb2B,MAcvB;AACJf,EAAAA,IAAI,EAAEF,KAAK,CAACkB;AADR,CAduB,CAA7B;;AAkBA,MAAMC,iBAAiB,GAAIC,GAAD,KAAU;AAClClB,EAAAA,IAAI,EAAEF,KAAK,CAACqB,oBADsB;AAElCC,EAAAA,OAAO,EAAEF;AAFyB,CAAV,CAA1B;;AAKA,OAAO,MAAMG,qBAAqB,GAAG,CACnClB,KADmC,EAEnCC,QAFmC,EAGnCC,KAHmC,EAInCC,WAJmC,EAKnCC,QALmC,EAMnCC,UANmC,EAOnCC,OAPmC,EAQnCC,UARmC,EASnCC,OATmC,EAUnCC,aAVmC,EAWnCC,UAXmC,EAYnCC,WAZmC,EAanCC,WAbmC,KAchC;AACH,SAAO,UAAUO,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACvB,oBAAoB,EAArB,CAAR;AACAF,IAAAA,KAAK,CACF0B,IADH,CACQ,wDADR,EACkE;AAC9DpB,MAAAA,KAAK,EAAEA,KADuD;AAE9DC,MAAAA,QAAQ,EAAEA,QAFoD;AAG9DC,MAAAA,KAAK,EAAEA,KAHuD;AAI9DmB,MAAAA,MAAM,EAAE;AACNnB,QAAAA,KAAK,EAAEC,WADD;AAENmB,QAAAA,EAAE,EAAElB;AAFE,OAJsD;AAQ9DmB,MAAAA,KAAK,EAAE;AACLrB,QAAAA,KAAK,EAAEG,UADF;AAELiB,QAAAA,EAAE,EAAEhB;AAFC,OARuD;AAY9DkB,MAAAA,KAAK,EAAE;AACLtB,QAAAA,KAAK,EAAEK,UADF;AAELe,QAAAA,EAAE,EAAEd;AAFC,OAZuD;AAgB9DiB,MAAAA,QAAQ,EAAE;AACRvB,QAAAA,KAAK,EAAEO,aADC;AAERa,QAAAA,EAAE,EAAEZ;AAFI,OAhBoD;AAoB9DC,MAAAA,WAAW,EAAEA,WApBiD;AAqB9DC,MAAAA,WAAW,EAAEA;AArBiD,KADlE,EAwBGc,IAxBH,CAwBSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,QAAvC;AACAR,MAAAA,QAAQ,CACNpB,oBAAoB,CAClBC,KADkB,EAElBC,QAFkB,EAGlBC,KAHkB,EAIlBC,WAJkB,EAKlBC,QALkB,EAMlBC,UANkB,EAOlBC,OAPkB,EAQlBC,UARkB,EASlBC,OATkB,EAUlBC,aAVkB,EAWlBC,UAXkB,EAYlBC,WAZkB,EAalBC,WAbkB,CADd,CAAR;AAiBD,KA3CH,EA4CGkB,KA5CH,CA4CUf,GAAD,IAASD,iBAAiB,CAACC,GAAD,CA5CnC;AA6CD,GA/CD;AAgDD,CA/DM","sourcesContent":["/* eslint-disable object-shorthand */\nimport axios from \"axios\";\nimport * as types from \"../actionTypes/actionTypes\";\n\nconst addNewProductPending = () => ({\n  type: types.ADD_NEW_PRODUCT_PENDING,\n});\nconst addNewProductSuccess = (\n  price,\n  imageUrl,\n  title,\n  statustitle,\n  statusid,\n  colortitle,\n  colorid,\n  brandtitle,\n  brandid,\n  categorytitle,\n  categoryid,\n  description,\n  isOfferable\n) => ({\n  type: types.ADD_NEW_PRODUCT_SUCCESS,\n});\n\nconst addNewProductFail = (err) => ({\n  type: types.ADD_NEW_PRODUCT_FAIL,\n  payload: err,\n});\n\nexport const addNewProductInitiate = (\n  price,\n  imageUrl,\n  title,\n  statustitle,\n  statusid,\n  colortitle,\n  colorid,\n  brandtitle,\n  brandid,\n  categorytitle,\n  categoryid,\n  description,\n  isOfferable\n) => {\n  return function (dispatch) {\n    dispatch(addNewProductPending());\n    axios\n      .post(\"https://bootcampapi.techcs.io/api/fe/v1/product/create\", {\n        price: price,\n        imageUrl: imageUrl,\n        title: title,\n        status: {\n          title: statustitle,\n          id: statusid,\n        },\n        color: {\n          title: colortitle,\n          id: colorid,\n        },\n        brand: {\n          title: brandtitle,\n          id: brandid,\n        },\n        category: {\n          title: categorytitle,\n          id: categoryid,\n        },\n        description: description,\n        isOfferable: isOfferable,\n      })\n      .then((response) => {\n        console.log(\"offered Price Response:\", response);\n        dispatch(\n          addNewProductSuccess(\n            price,\n            imageUrl,\n            title,\n            statustitle,\n            statusid,\n            colortitle,\n            colorid,\n            brandtitle,\n            brandid,\n            categorytitle,\n            categoryid,\n            description,\n            isOfferable\n          )\n        );\n      })\n      .catch((err) => addNewProductFail(err));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}