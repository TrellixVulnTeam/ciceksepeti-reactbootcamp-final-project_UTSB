{"ast":null,"code":"import axios from \"axios\";\nimport * as types from \"../actionTypes/actionTypes\"; // LOGIN ACTIONS\n\nconst loginStart = () => ({\n  type: types.LOGIN_START\n});\n\nconst loginSuccess = (token, userMailAdress) => ({\n  type: types.LOGIN_SUCCESS,\n  payload: token,\n  userMailAdress\n});\n\nconst loginFail = error => ({\n  type: types.LOGIN_FAIL,\n  payload: error\n}); // REGISTER ACTIONS\n\n\nconst registerStart = () => ({\n  type: types.REGISTER_START\n});\n\nconst registerSuccess = (token, userMailAdress) => ({\n  type: types.REGISTER_SUCCESS,\n  payload: token,\n  userMailAdress\n});\n\nconst registerFail = error => ({\n  type: types.REGISTER_FAIL,\n  payload: error\n}); // LOGOUT ACTION\n\n\nexport const logoutInitiate = () => ({\n  type: types.LOGOUT_USER\n}); // LOGIN INITIATOR ACTION\n\nexport const loginInitiate = (email, password) => {\n  return function (dispatch) {\n    dispatch(loginStart());\n    axios.post(\"/authorization/signin\", {\n      email,\n      password\n    }).then(response => {\n      console.log(\"response\", response);\n      dispatch(loginSuccess(response.data.access_token, email));\n    }).catch(err => {\n      console.log(\"error: \", err);\n      dispatch(loginFail(err));\n    });\n  };\n}; // REGISTER INITIATOR ACTION\n\nexport const registerInitiate = (email, password) => {\n  return function (dispatch) {\n    dispatch(registerStart());\n    axios.post(\"http://bootcampapi.techcs.io/api/fe/v1/authorization/signup\", {\n      email,\n      password\n    }).then(response => {\n      console.log(\"response\", response);\n      dispatch(registerSuccess(response.data.access_token, email));\n    }).catch(err => {\n      console.log(\"error: \", err);\n      dispatch(registerFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/oguzhanyuksel/Desktop/Yazilim/CICEKSEPETI/ciceksepeti-react-bootcamp-final-project1/src/redux/actions/actions.js"],"names":["axios","types","loginStart","type","LOGIN_START","loginSuccess","token","userMailAdress","LOGIN_SUCCESS","payload","loginFail","error","LOGIN_FAIL","registerStart","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","REGISTER_FAIL","logoutInitiate","LOGOUT_USER","loginInitiate","email","password","dispatch","post","then","response","console","log","data","access_token","catch","err","registerInitiate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,OAAO;AACxBC,EAAAA,IAAI,EAAEF,KAAK,CAACG;AADY,CAAP,CAAnB;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,cAAR,MAA4B;AAC/CJ,EAAAA,IAAI,EAAEF,KAAK,CAACO,aADmC;AAE/CC,EAAAA,OAAO,EAAEH,KAFsC;AAG/CC,EAAAA;AAH+C,CAA5B,CAArB;;AAMA,MAAMG,SAAS,GAAIC,KAAD,KAAY;AAC5BR,EAAAA,IAAI,EAAEF,KAAK,CAACW,UADgB;AAE5BH,EAAAA,OAAO,EAAEE;AAFmB,CAAZ,CAAlB,C,CAKA;;;AACA,MAAME,aAAa,GAAG,OAAO;AAC3BV,EAAAA,IAAI,EAAEF,KAAK,CAACa;AADe,CAAP,CAAtB;;AAIA,MAAMC,eAAe,GAAG,CAACT,KAAD,EAAQC,cAAR,MAA4B;AAClDJ,EAAAA,IAAI,EAAEF,KAAK,CAACe,gBADsC;AAElDP,EAAAA,OAAO,EAAEH,KAFyC;AAGlDC,EAAAA;AAHkD,CAA5B,CAAxB;;AAMA,MAAMU,YAAY,GAAIN,KAAD,KAAY;AAC/BR,EAAAA,IAAI,EAAEF,KAAK,CAACiB,aADmB;AAE/BT,EAAAA,OAAO,EAAEE;AAFsB,CAAZ,CAArB,C,CAKA;;;AACA,OAAO,MAAMQ,cAAc,GAAG,OAAO;AACnChB,EAAAA,IAAI,EAAEF,KAAK,CAACmB;AADuB,CAAP,CAAvB,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAChD,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACtB,UAAU,EAAX,CAAR;AACAF,IAAAA,KAAK,CACFyB,IADH,CACQ,uBADR,EACiC;AAAEH,MAAAA,KAAF;AAASC,MAAAA;AAAT,KADjC,EAEGG,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACAH,MAAAA,QAAQ,CAACnB,YAAY,CAACsB,QAAQ,CAACG,IAAT,CAAcC,YAAf,EAA6BT,KAA7B,CAAb,CAAR;AACD,KALH,EAMGU,KANH,CAMUC,GAAD,IAAS;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,GAAvB;AACAT,MAAAA,QAAQ,CAACd,SAAS,CAACuB,GAAD,CAAV,CAAR;AACD,KATH;AAUD,GAZD;AAaD,CAdM,C,CAgBP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACZ,KAAD,EAAQC,QAAR,KAAqB;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AACAb,IAAAA,KAAK,CACFyB,IADH,CACQ,6DADR,EACuE;AAAEH,MAAAA,KAAF;AAASC,MAAAA;AAAT,KADvE,EAEGG,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACAH,MAAAA,QAAQ,CAACT,eAAe,CAACY,QAAQ,CAACG,IAAT,CAAcC,YAAf,EAA6BT,KAA7B,CAAhB,CAAR;AACD,KALH,EAMGU,KANH,CAMUC,GAAD,IAAS;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,GAAvB;AACAT,MAAAA,QAAQ,CAACP,YAAY,CAACgB,GAAD,CAAb,CAAR;AACD,KATH;AAUD,GAZD;AAaD,CAdM","sourcesContent":["import axios from \"axios\";\nimport * as types from \"../actionTypes/actionTypes\";\n\n// LOGIN ACTIONS\nconst loginStart = () => ({\n  type: types.LOGIN_START,\n});\n\nconst loginSuccess = (token, userMailAdress) => ({\n  type: types.LOGIN_SUCCESS,\n  payload: token,\n  userMailAdress,\n});\n\nconst loginFail = (error) => ({\n  type: types.LOGIN_FAIL,\n  payload: error,\n});\n\n// REGISTER ACTIONS\nconst registerStart = () => ({\n  type: types.REGISTER_START,\n});\n\nconst registerSuccess = (token, userMailAdress) => ({\n  type: types.REGISTER_SUCCESS,\n  payload: token,\n  userMailAdress,\n});\n\nconst registerFail = (error) => ({\n  type: types.REGISTER_FAIL,\n  payload: error,\n});\n\n// LOGOUT ACTION\nexport const logoutInitiate = () => ({\n  type: types.LOGOUT_USER,\n});\n\n// LOGIN INITIATOR ACTION\nexport const loginInitiate = (email, password) => {\n  return function (dispatch) {\n    dispatch(loginStart());\n    axios\n      .post(\"/authorization/signin\", { email, password })\n      .then((response) => {\n        console.log(\"response\", response);\n        dispatch(loginSuccess(response.data.access_token, email));\n      })\n      .catch((err) => {\n        console.log(\"error: \", err);\n        dispatch(loginFail(err));\n      });\n  };\n};\n\n// REGISTER INITIATOR ACTION\nexport const registerInitiate = (email, password) => {\n  return function (dispatch) {\n    dispatch(registerStart());\n    axios\n      .post(\"http://bootcampapi.techcs.io/api/fe/v1/authorization/signup\", { email, password })\n      .then((response) => {\n        console.log(\"response\", response);\n        dispatch(registerSuccess(response.data.access_token, email));\n      })\n      .catch((err) => {\n        console.log(\"error: \", err);\n        dispatch(registerFail(err));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}